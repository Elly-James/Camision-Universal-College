"""Add completion payment fields to Job model

Revision ID: a308f83360e3
Revises: b3b38fdd3fd3
Create Date: 2025-08-25 10:48:50.500321

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a308f83360e3'
down_revision = 'b3b38fdd3fd3'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First drop the existing constraint
    op.drop_constraint('check_payment_status', 'job', type_='check')
    
    # Add new columns
    op.add_column('job', sa.Column('completion_tracking_id', sa.String(length=36), nullable=True))
    op.add_column('job', sa.Column('merchant_reference', sa.String(length=100), nullable=True))
    op.add_column('job', sa.Column('completion_reference', sa.String(length=100), nullable=True))
    
    # Change payment_status default to 'Pending' and make nullable
    op.alter_column('job', 'payment_status',
               existing_type=sa.VARCHAR(length=50),
               server_default='Pending',
               nullable=True)
    
    # Change status default to 'Pending Payment'
    op.alter_column('job', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default='Pending Payment',
               nullable=True)
    
    # Create new check constraint with all three payment statuses
    op.create_check_constraint(
        'check_payment_status',
        'job',
        sa.text("payment_status IN ('Pending', 'Partial', 'Completed')")
    )
    
    # Update existing records to maintain data integrity
    op.execute("UPDATE job SET payment_status = 'Pending' WHERE payment_status = 'Partial'")
    op.execute("UPDATE job SET status = 'Pending Payment' WHERE status = 'Pending' AND payment_status = 'Pending'")
    op.execute("UPDATE job SET status = 'In Progress' WHERE payment_status = 'Partial'")
    
    # Make ipn_registration created_at nullable if needed
    op.alter_column('ipn_registration', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Revert ipn_registration changes first
    op.alter_column('ipn_registration', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    
    # Drop the new check constraint
    op.drop_constraint('check_payment_status', 'job', type_='check')
    
    # Revert status default to 'Pending'
    op.alter_column('job', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default='Pending',
               nullable=True)
    
    # Revert payment_status default to 'Partial' and make not nullable
    op.alter_column('job', 'payment_status',
               existing_type=sa.VARCHAR(length=50),
               server_default='Partial',
               nullable=False)
    
    # Drop the new columns
    op.drop_column('job', 'completion_reference')
    op.drop_column('job', 'merchant_reference')
    op.drop_column('job', 'completion_tracking_id')
    
    # Recreate the original check constraint
    op.create_check_constraint(
        'check_payment_status',
        'job',
        sa.text("payment_status IN ('Partial', 'Completed')")
    )
    
    # Revert data changes
    op.execute("UPDATE job SET payment_status = 'Partial' WHERE payment_status = 'Pending'")
    op.execute("UPDATE job SET status = 'Pending' WHERE status = 'Pending Payment'")
    # ### end Alembic commands ###